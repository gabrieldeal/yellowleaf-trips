#!/usr/bin/perl
#-*-perl-*-

use strict;
use lib './lib';

use Carp ();
use Cwd ();
use File::chdir;
use Data::Dumper ();
use File::Basename ();
use IO::File ();
use File::Path ();
use Getopt::Long ();

local $Data::Dumper::Maxdepth = 5;
local $Data::Dumper::Sortkeys = 1;
local $^W = 1;
local $| = 1;
local $SIG{__WARN__} = sub { Carp::confess "DIEING on warning: @_" };
local $SIG{__DIE__}  = sub { Carp::confess "DIEING: @_" };

my @g_options = qw(
    directory=s
    verbose
    help
);
my %g_options = (
    verbose => 1,
);

exit(main());

######################################################################

sub usage {
    my ($prog) = ($0 =~ /([^\/]+)$/);
    sprintf("Usage: $prog [ OPTIONS ]\nOptions:\n\t--"
	    . join("\n\t--", @g_options)
            . <<EOT);
EOT
}

sub get_options {
    local $SIG{__WARN__};
    if (! Getopt::Long::GetOptions(\%g_options, @g_options)
	|| $g_options{'help'})
    {
	print usage();
        exit 1;
    }

    if (exists $g_options{'timezone'}) {
	$ENV{'TZ'} = $g_options{'timezone'};
    }

    foreach my $required (qw(directory)) {
	die "Missing --$required" unless exists $g_options{$required};
    }
}

sub main {
    srand($$ ^ time());
    get_options();

    make_html();
}

sub make_html {
    my $reports = require "bin/fay-files.pl";

    my @reports;
    foreach my $dir (sort glob "$g_options{directory}/*") {
	push @reports, read_report($dir, $reports);
    }

    print Data::Dumper::Dumper(\@reports);
}

sub read_report {
    my ($dir, $reports) = @_;

    local $CWD = $dir;

    my $tr = cat_file("text.txt");
    my @maps = glob("*.{JPG,jpg,BMP}");

    my @images = get_images();
    my ($date, $name) = ($dir =~ m,/(\d\d\d\d-\d\d-\d\d)-([^/]+),) or die "Missing date '$dir'";

    $name =~ s/-/ /g;
    my $report = $reports->{$name} or die "Can't find '$name'";

    return { tr => $tr,
	     subdir => File::Basename::basename($dir),
	     maps => \@maps,
	     images => \@images,
	     year => $report->{year},
	     month => $report->{month},
	     day => $report->{day},
	     title => $report->{destination},
	 };
}

sub get_images {
    my @images;
    foreach my $f (glob "*") {
	next unless -d $f;
	push @images, [ glob "$f/*{jpg,JPG}" ];
    }

    return @images;
}

sub cat_file {
    my ($file) = @_;

    return undef unless -e $file;

    my $fh = IO::File->new($file, 'r') or die $!;
    return join('', <$fh>);
}

1;
