#!/usr/bin/perl
#-*-perl-*-

use strict;

use File::Spec ();
use Getopt::Long ();
my @g_options = qw(
		      input=s@
                      no-waypoints
                      output=s
	      );
my %g_options = ();

local $ENV{PATH} .= ":/cygdrive/c/Program Files (x86)/GPSBabel";

exit(main());

sub usage {
    my ($prog) = ($0 =~ /([^\/]+)$/);
    sprintf("Usage: $prog [ OPTIONS ]\nOptions:\n\t--"
	    . join("\n\t--", @g_options)
            . <<EOT);
EOT
}

sub get_options {
    local $SIG{__WARN__};
    if (! Getopt::Long::GetOptions(\%g_options, @g_options)
	|| $g_options{'help'})
    {
	print usage();
        exit 1;
    }

    foreach my $required (qw(input output)) {
	die "Missing --$required" unless exists $g_options{$required};
    }
}

sub main {
    get_options();

    my @command = qw(gpsbabel -r -w -t);
    foreach my $input (@{ $g_options{input} }) {
	my ($input_type) = ($input =~ /\.(\w+)$/);
	if ($input_type eq 'crs') {
	    $input_type = "gtrnctr";
        }
        if ($input_type eq 'tpo') {
            $input_type = 'tpo3';
        }

        my $relative_input = File::Spec->abs2rel($input); # gpsbabel doesn't like cygwin-style paths.
        push @command, ("-i", $input_type, "-f", $relative_input);
    }

    my ($output_type) = ($g_options{output} =~ /\.(\w+)$/);
    my $output_options = $output_type;
    if ($output_type eq 'kml') {
	$output_options .= ",points=0,trackdata=0,labels=0,line_color=ff0000e6";
    }
    my $relative_output = File::Spec->abs2rel($g_options{output});
    push @command, ("-x", "nuketypes,waypoints") if $g_options{'no-waypoints'};
    push @command, ("-o", $output_options, "-F", $relative_output);

    print "Running this command: @command\n";
    system(@command);
    if ($? != 0) {
        die "gpsconvert failed!";
    }

    return 0;
}

1;
