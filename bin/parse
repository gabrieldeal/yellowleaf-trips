#!/usr/bin/perl
#-*-perl-*-

use strict;
use lib './lib';

use Carp ();
use Data::Dumper ();
use Date::Manip ();
use File::Find ();
use File::Path ();
use Getopt::Long ();
use IO::File ();
use Scramble::Area ();
use Scramble::Geekery ();
use Scramble::List ();
use Scramble::Location ();
use Scramble::Logger ();
use Scramble::Misc ();
use Scramble::Image ();
use Scramble::Reference ();
use Scramble::Report ();
use Scramble::Resume ();
use Scramble::Tests ();
use Scramble::Winter ();
use Scramble::XML ();
use Spell ();

my $gRoot = "yellowleaf.org/scramble";
local $Data::Dumper::Maxdepth = 5;
local $^W = 1;
local $| = 1;
local $SIG{__WARN__} = sub { Carp::confess "DIEING on warning: @_" };
local $SIG{__DIE__}  = sub { Carp::confess "DIEING: @_" };

my @g_options = qw(
                   dictionary-directory=s
		   timezone=s
		   verbose
		   action=s@
		   skip=s@
		   file=s@
		   images-directory=s
                   templates-directory=s
                   javascript-directory=s
                   css-directory=s
                   output-directory=s
                   help
		   );
my %g_options = (
                 "file" => [],
                 "action" => [],
                 "skip" => [],
                 "timezone" => "PDT",
                 "dictionary-directory=" => "dict/english.0",
		 "images-directory" => "data/$ENV{USER}/images",
                 "templates-directory" => "data/$ENV{USER}/templates",
                 "javascript-directory" => "data/javascript",
                 "css-directory" => "data/css",
                 "output-directory" => "html",
		 );

exit(main());

###

sub usage {
    my ($prog) = ($0 =~ /([^\/]+)$/);
    sprintf("Usage: $prog [ OPTIONS ]\nOptions:\n\t--"
	    . join("\n\t--", @g_options)
            . <<EOT);


Reads XML from the data directory and writes HTML to the html/g
directory.
EOT
}

sub get_options {
    local $SIG{__WARN__};
    if (! Getopt::Long::GetOptions(\%g_options, @g_options)
	|| $g_options{'help'})
    {
	print usage();
        exit 1;
    }

    if (exists $g_options{'timezone'}) {
	$ENV{'TZ'} = $g_options{'timezone'};
    }

    foreach my $required (qw(
                             images-directory
                             output-directory
                             javascript-directory
                             css-directory
                             templates-directory)) 
    {
	die "Missing --$required" unless exists $g_options{$required};
        if ($g_options{$required} =~ m,^/, || $g_options{$required} =~ m,\.\.,) {
            die "--$required must be a relative path and contain no '..'";
        }
    }

    Scramble::Misc::set_output_directory($g_options{'output-directory'});
    Scramble::Logger::set_verbose($g_options{'verbose'});
}

sub get_party_stats {
  my %stats;
  my %people;
  foreach my $report (Scramble::Report::get_all()) {
    my $party = $report->_get_optional_content('party');
    next unless $party;

    my @members = map { $_->{name} } @{ $party->{member} || [] };
    push @members, grep /\S/, split(/\n/, $party->{content}) if $party->{content};

    my ($yyyy, $mm, $dd) = Scramble::Time::parse_date($report->get_start_date());

    die "$yyyy/$mm/$dd " . Data::Dumper::Dumper($party) unless $party->{size};

    $stats{$mm}{trip_count}++;
    $stats{$mm}{person_count} += $party->{size};

    foreach my $member (@members) {
      my $name;
      if (ref $member) {
	$name = $member->{name};
      } else {
	$name = $member;
      }
      $name =~ s/\s*\([\w\s]*\)\s*$//;
      $name =~ s/^\s*(.*?)[\s\.]*$/$1/i;
      $name = "Brad (Mister Fox) White" if $name =~ /(mr\.?|mister)\s*fox/i;
      $name = "Courtney (Rocklocks) Braun" if $name =~ /rock\s*locks/i;
      $name =~ s/^Mom$/Bonnie Deal/i;
      $name =~ s/^Boni Deal$/Bonnie Deal/i;
      $name = "Laurie Cullen" if $name =~ /^Laurie C$/;
      $name =~ s/^Carla S$/Carla Schauble/i;
      $name =~ s/^Carla Shauble$/Carla Schauble/i;
      $name =~ s/^David Deal$/Dave Deal/i;
      $name =~ s/^Matt B$/Matt Burton/i;
      $name = "Yana Radenska" if $name =~ /\byana\b/i;
      $name = "Jiri Richter" if $name =~ /\bjiri\b/i;
      $name = "Lindsay Malone" if $name =~ /\bLindsay Malone\b/i;
      $name = "Brian Walkenhauer" if $name =~ /^(Brian|Bryan) Walk/;
      $name = "Janet Putz" if $name =~ /\bputz\b/i;
      $name = "Tazz" if $name =~ /\btazz\b/i || $name eq 'Ann Arnoldy';
      $name = "Lynn Graff" if $name eq "Lynn Graf";
      $name = "Mike Helminger" if $name =~ /\biron\b/i || $name eq "Mike Hemlinger" || $name =~ /^Mike H$/;
      $name = "Tom Nanevicz" if $name =~ /\bTom N\b/i || $name =~ /\bGeoTom\b/i;
      $name = "Bruno Reinys" if $name eq "Bruno R";
      $name = "Matt Burton" if $name =~ /\bmatt\b/i && $name =~ /\bburton\b/;
      $name = "David Suhr" if $name eq "David Sur";
      $name = "Atsuko Yamaguchi" if $name =~ /\batsuko\b/i;
      $name =~ s/^Brett D$/Brett Dyson/i;
      $name =~ s/^Bruno$/Bruno Reinys/i;
      $people{$name}++;
    }
  }

  foreach my $name (sort { $people{$a} <=> $people{$b} } keys %people) {
    printf("%d %s\n", $people{$name}, $name);
  }

  foreach my $mm (sort { $a <=> $b } keys %stats) {
    printf("$mm: %.2f people on average in %d trips\n",
	   $stats{$mm}{person_count} / $stats{$mm}{trip_count},
	   $stats{$mm}{trip_count});
  }
}

sub spell_check {
    Spell::initialize($g_options{'dictionary-directory'});

    my $location_collection = Scramble::Location::get_all();
    foreach my $location ($location_collection->get_all()) {
        Spell::add_words($location->get_name());
        foreach my $aka ($location->get_aka_names()) {
            Spell::add_words($aka);
        }
    }

    foreach my $id (Scramble::Reference::get_ids()) {
        Spell::add_words($id);
    }

    my @misspelled;
    foreach my $report (Scramble::Report::get_all()) {
        next unless defined $report->get_route();
        my @texts;
        push @texts, ($report->get_route(), $report->get_name());
        foreach my $text (@texts) {
            push @misspelled,_spell_check($text, $report->get_filename(), $report->get_start_date());
        }
    }

    foreach my $image (Scramble::Image::get_all_images_collection()->get_all()) {
        foreach my $text ($image->get_description(), $image->get_of(), $image->get_from()) {
            push @misspelled,_spell_check($text, $image->get_source_directory(), $image->get_date());
        }
    }
    if (@misspelled) {
        die join("\n", @misspelled) . "\n";
    }
}

sub _spell_check {
    my ($text, $name, $date) = @_;

    return unless defined $text;

    my @misspelled = Spell::check($text);
    return unless @misspelled;

    my $message = "Misspelled in " . $name . ": @misspelled.";
    if (defined $date && $date gt '2007/07/01') {
        return ($message);
    } else {
        print "$message\n";
        return ();
    }
}

sub main {
    srand($$ ^ time());
    get_options();

    File::Path::mkpath([
			"$g_options{'output-directory'}/g/li",
			"$g_options{'output-directory'}/g/a", 
			"$g_options{'output-directory'}/g/js",
			"$g_options{'output-directory'}/g/css",
			"$g_options{'output-directory'}/g/r", 
			"$g_options{'output-directory'}/g/l", 
			"$g_options{'output-directory'}/g/enl", 
			"$g_options{'output-directory'}/g/kml", 
			"$g_options{'output-directory'}/g/m",
		       ], 
		       0, 
		       0755);

    should('htaccess') && make_htaccess();
    should('javascript') && copy_javascript();
    should('css') && copy_css();

    Scramble::Area::open();
    Scramble::Area::Quad::init();
    Scramble::Reference::open();
    print "WHERE!\n";

    if (0 && should('convert')) {
    print "NONO HELP!\n";
	#convert_locations();
	convert_reports();
	exit 0;
    }
    print "HELP!\n";

    if (! @{ $g_options{'file'} }) {
	Scramble::Report::open_all($g_options{'images-directory'});
    } else {
	foreach my $file (@{ $g_options{'file'} }) {
	    my $report = Scramble::Report::open_specific($file);
	    $report->make_page_html() if $report;
	}
    }
    Scramble::Image::copy();
    spell_check();
    if (@{ $g_options{'file'} }) {
        return 0;
    }

    Scramble::List::open(glob("data/lists/*.xml"));

    if (should('template')) {
	make_html_file("$g_options{'templates-directory'}/kloke.html",
                       "Kloke's Cascade winter climbs",
		       'no-insert-links' => 1,
		       'no-add-picture' => 1);
	make_html_file("$g_options{'templates-directory'}/sfox.html",
                       "Steve Fox's winter scrambles",
		       'no-insert-links' => 1,
		       'no-add-picture' => 1);
	make_html_file("$g_options{'templates-directory'}/missing.html", 
		       "Missing Page",
		       'no-insert-links' => 1,
                       'no-add-picture' => 1);
	make_html_file("$g_options{'templates-directory'}/usgs.html", 
                       "Topo Map",
                       'enable-embedded-google-map' => 1,
                       'no-title' => 1,
                       'no-insert-links' => 1,
                       'no-add-picture' => 1);
    }

    should('kml') && copy_kml();
    should('report-index') && Scramble::Report::make_reports_index_page();
    should('link') && Scramble::Reference::make_references();
    should('list') && Scramble::List::make_lists();
    should('report') && Scramble::Report::make_all_report_pages();
    should('picture') && Scramble::Image::make_enl_picture_pages();
    should('winter') && Scramble::Winter::make_winter_page();
    should('resume') && Scramble::Resume::make_resume_page();
    should('rss') && Scramble::Report::make_rss();
    should('geekery') && Scramble::Geekery::make_page();
    should('locations-index') && Scramble::Location::make_locations_index();
    should('picture-by-year') && Scramble::Image::make_images_by_year_page();
    (should('quad-layout') || should('area')) && Scramble::Area::Quad::make_quad_layout();
    should('private') && Scramble::Misc::make_all_internal_links_page();
    should('quad') && Scramble::Location::make_quads();
    should('location') && Scramble::Location::make_locations();
    should('area') && Scramble::Area::make_pages();
    should('party-stats') && get_party_stats();
    should('test') && Scramble::Tests::run();

    return 0;
}

sub should {
    my ($page_type) = @_;

    return 0 if @{ $g_options{'file'} } && ! @{ $g_options{'action'} };
    return 0 if grep { $page_type eq $_ || "${page_type}s" eq $_ } @{ $g_options{'skip'} };

    return 1 if ! @{ $g_options{'action'} };
    return scalar(grep { $page_type eq $_ || "${page_type}s" eq $_ } @{ $g_options{'action'} });
}

sub copy_kml {
    my $command = sprintf("cp %s/*.kml %s/g/kml/",
                   $g_options{'templates-directory'},
                   $g_options{'output-directory'});
    system($command);
    if ($?) {
        die "Error running $command: $!, $?";
    }
}

sub copy_javascript {
    my $command = sprintf("cp %s/*.js %s/g/js/",
                   $g_options{'javascript-directory'},
                   $g_options{'output-directory'});
    system($command);
    if ($?) {
        die "Error running $command: $!, $?";
    }
}

sub copy_css {
    my $command = sprintf("cp %s/*.css %s/g/css/",
                   $g_options{'css-directory'},
                   $g_options{'output-directory'});
    system($command);
    if ($?) {
        die "Error running $command: $!, $?";
    }
}

sub make_htaccess {
    # Not r or li -- they have index.html files.
    foreach my $dir (qw(m l a)) {
        Scramble::Misc::create("$dir/.htaccess", <<EOT);
Redirect /scramble/g/$dir/index.html http://$gRoot/g/m/missing.html
EOT
    }

  Scramble::Misc::create(".htaccess", <<EOT);
ErrorDocument 404 /scramble/g/m/missing.html
Redirect /scramble/g/index.html http://$gRoot/g/m/missing.html
EOT

  # cheating here
  Scramble::Misc::create("../.htaccess", <<EOT);
ErrorDocument 404 /scramble/g/m/home.html
Redirect /scramble/index.html http://$gRoot/g/m/missing.html
EOT
}

######################################################################


sub make_template_html {
    my ($filename, %options) = @_;

    my $fh = IO::File->new($filename, 'r')
	or die "Unable to open '$filename': $!";
    my $html = join('', <$fh>);
    if (! $options{'no-insert-links'}) {
        Scramble::Misc::insert_links($html);
    }
    $html .= delete $options{'after-file-contents'} if exists $options{'after-file-contents'};

    return $html;
}

sub make_html_file {
    my ($filename, $title, %options) = @_;

    if (! -e $filename) {
        print "Missing $filename\n";
        return;
    }

    my $html = make_template_html($filename, %options);

    my ($ofile) = ($filename =~ m,/([^/]+)$,);

    Scramble::Misc::create("m/$ofile",
			   Scramble::Misc::make_1_column_page(title => $title, 
							      'include-header' => 1,
							      html => $html));
}

sub convert_locations {
    my $converter = Scramble::Converter::Location->new();

    my @files = @{ $g_options{'file'} } || glob("data/locations/*.xml");
    foreach my $file (@files) {
	my @locations;
	foreach my $location (Scramble::Location->new_objects($file)) {
	    if ($location->get_is_driving_location() or $location->get_is_road()) {
		printf("Skipping %s\n", $location->get_name());
		next;
	    }
	    push @locations, $location;
	}
	next unless @locations;

	my $path = sprintf("data/locations/converted/%s.xml", Scramble::Misc::sanitize_for_filename($locations[0]->get_name()));

	my $fh = IO::File->new($path, 'w') or die "Failed to create $path: $!";
	$fh->print($converter->convert(@locations) . "\n") or die;
	$fh->close() or die;
	Scramble::XML::parse($path);
    }
}

sub get_converted_report_path {
    my ($report) = @_;


    my %args = (
                'trip-id' => $report->get_trip_id(),
                'date' => $report->get_start_date(),
               );
    my @images = Scramble::Image::get_all_images_collection()->find(%args);
    if (@images) {
	return sprintf("%s/report.xml", $images[0]->get_source_directory());
    }

    my $subdir = File::Basename::basename($report->{path});
    $subdir =~ s/\.xml$//;
    $subdir = "data/gabrielx/images/$subdir";
    File::Path::mkpath([ $subdir ], 0, 0755);

    return "$subdir/report.xml";
}
sub convert_reports {
    use Scramble::Converter::Report ();
    my $converter = Scramble::Converter::Report->new();

    my @files = @{ $g_options{'file'} };
    @files = glob("data/gabrielx/reports/*.xml") unless @files;

    foreach my $file (@files) {
	my @reports;
	my $report = Scramble::Report->new($file);
	next unless $report;

	my $path = get_converted_report_path($report);
	
	my $fh = IO::File->new($path, 'w') or die "Failed to create $path: $!";
	$fh->print($converter->convert($report) . "\n") or die;
	$fh->close() or die;

	Scramble::XML::parse($path);
    }
}

1;
